# Copyright (c) 2018 Meteca SA. All right reserved.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


name=Briki MBC
version=2.1.4

# Compile variables
# -----------------

compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra

compiler.path={build.compiler.path}
compiler.c.cmd={build.compiler.c.cmd}
compiler.c.flags={build.compiler.c.flags}
compiler.c.elf.cmd={build.compiler.c.cmd}
compiler.c.elf.flags={build.compiler.c.elf.flags}
compiler.S.cmd={build.compiler.c.cmd}
compiler.S.flags={build.compiler.S.flags}
compiler.cpp.cmd={build.compiler.cpp.cmd}
compiler.cpp.flags={build.compiler.cpp.flags}
compiler.ar.cmd={build.compiler.ar.cmd}
compiler.ar.flags={build.compiler.ar.flags}
compiler.objcopy.cmd={build.compiler.objcopy.cmd}
compiler.objcopy.eep.flags={build.compiler.objcopy.eep.flags}
compiler.elf2hex.bin.flags={build.compiler.elf2hex.bin.flags}
compiler.elf2hex.hex.flags={build.compiler.elf2hex.hex.flags}
compiler.elf2hex.cmd={build.compiler.elf2hex.cmd}
compiler.ldflags={build.compiler.ldflags}
compiler.size.cmd={build.compiler.size.cmd}
compiler.define=-DARDUINO=
compiler.readelf.cmd={build.compiler.readelf.cmd}

# this can be overriden in boards.txt
build.extra_flags=

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
#compiler.c.elf.extra_flags=-v
compiler.cpp.extra_flags=
compiler.S.extra_flags=
compiler.ar.extra_flags=
compiler.elf2hex.extra_flags=

compiler.arm.cmsis.c.flags={build.compiler.arm.cmsis.c.flags}
compiler.arm.cmsis.ldflags={build.compiler.arm.cmsis.ldflags}

# USB Flags
# ---------
build.usb_flags=-DUSB_VID={build.vid} -DUSB_PID={build.pid} -DUSBCON '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'

# Default usb manufacturer will be replaced at compile time using
# numeric vendor ID if available or by board's specific value.
build.usb_manufacturer="Unknown"

# Compile patterns
# ----------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DATCA_PRINTF -DATCA_USE_RTOS_TIMER -DATCA_HAL_I2C -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DBRIKI_{build.board} -DARDUINO_ARCH_{build.arch} -DARDUINO_ARCH_{build.sub_arch} {compiler.c.extra_flags} {build.extra_flags} {compiler.arm.cmsis.c.flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DATCA_PRINTF -DATCA_USE_RTOS_TIMER -DATCA_HAL_I2C -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DBRIKI_{build.board} -DARDUINO_ARCH_{build.arch} -DARDUINO_ARCH_{build.sub_arch} {compiler.cpp.extra_flags} {build.extra_flags} {compiler.arm.cmsis.c.flags} {includes} "{source_file}" -o "{object_file}"

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DBRIKI_{build.board} -DARDUINO_ARCH_{build.arch} -DARDUINO_ARCH_{build.sub_arch} {compiler.S.extra_flags} {build.extra_flags} {compiler.arm.cmsis.c.flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
# archive_file_path is needed for backwards compatibility with IDE 1.6.5 or older, IDE 1.6.6 or newer overrides this value
archive_file_path={build.path}/{archive_file}
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern={build.combine.pattern}

## Create output (bin file)
recipe.objcopy.bin.pattern={build.bin.pattern}

## Create output (hex file)
recipe.objcopy.hex.pattern={build.hex.pattern}

build.preferred_out_format=bin

## Save hex
recipe.output.tmp_file={build.project_name}.{build.preferred_out_format}
recipe.output.save_file={build.project_name}.{build.variant}.{build.preferred_out_format}

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
#recipe.size.regex=\.text\s+([0-9]+).*
#recipe.size.regex.data=^(?:\.data|\.rodata|\.bss)\s+([0-9]+).*

# Uploader tools
# --------------

#
# MBCTOOL
#

tools.mbctool.cmd=mbctool
tools.mcbtool.cmd.windows=mbctool.exe
tools.mbctool.path={runtime.tools.mbctool.path}/bin


tools.mbctool.upload.protocol=esp
tools.mbctool.upload.params.verbose=-vv
tools.mbctool.upload.params.quiet=
tools.mbctool.upload.pattern="{path}/{cmd}" -d "{upload.target}" -p "{serial.port}" -s 1500000 -u "{upload.partitions}" "{upload.boot_file}" "{upload.sketch_offset}" "{build.path}/{build.project_name}.bin" "{upload.part_file}"

#
# BOSSA
#
tools.bossac.path={runtime.tools.mbctool.path}/bin
tools.bossac.cmd=bossac
tools.bossac.cmd.windows=bossac.exe

tools.bossac.upload.params.verbose=-i -d
tools.bossac.upload.params.quiet=
tools.bossac.upload.pattern="{path}/{cmd}" {upload.verbose} --port={serial.port.file} -U {upload.native_usb} -i -e -w -v "{build.path}/{build.project_name}.bin" -R

tools.bossac_remote.upload.pattern=/usr/bin/run-bossac {upload.verbose} --port=ttyATH0 -U {upload.native_usb} -e -w -v /tmp/sketch.bin -R

tools.bossac.network_cmd={runtime.tools.arduinoOTA.path}/bin/arduinoOTA
tools.bossac.upload.network_pattern="{network_cmd}" -address {serial.port} -port 65280 -username arduino -password "{network.password}" -sketch "{build.path}/{build.project_name}.bin" -upload /sketch -b

#
# ESPTOOL
#

tools.esptool.path={runtime.tools.mbctool.path}/bin
tools.esptool.cmd=esptool
tools.esptool.cmd.windows=esptool.exe

tools.esptool.network_cmd=python "{runtime.platform.path}/tools/espota.py"
tools.esptool.network_cmd.windows="{runtime.platform.path}/tools/espota.exe"

tools.gen_esp32part.cmd=python "{runtime.platform.path}/tools/gen_esp32part.py"
tools.gen_esp32part.cmd.windows="{runtime.platform.path}/tools/gen_esp32part.exe"

tools.esptool.upload.protocol=esp32
tools.esptool.upload.params.verbose=
tools.esptool.upload.params.quiet=
tools.esptool.upload.pattern="{path}/{cmd}" --chip esp32 --port "{serial.port}" --baud 921600  --before default_reset --after hard_reset write_flash -z --flash_mode {build.flash_mode} --flash_freq {build.flash_freq} --flash_size detect 0xe000 "{runtime.platform.path}/tools/partitions/boot_app0.bin" 0x1000 "{runtime.platform.path}/tools/sdk/bin/bootloader_{build.boot}_{build.flash_freq}.bin" 0x10000 "{build.path}/{build.project_name}.bin" 0x8000 "{build.path}/{build.project_name}.partitions.bin"
tools.esptool.upload.network_pattern={network_cmd} -i "{serial.port}" -p "{network.port}" "--auth={network.password}" {upload.network_param} -f "{build.path}/{build.project_name}.bin"

#
# OpenOCD sketch upload
#

tools.openocd.path={runtime.tools.openocd-0.9.0-arduino6-static.path}
tools.openocd.cmd=bin/openocd
tools.openocd.cmd.windows=bin/openocd.exe

tools.openocd.upload.params.verbose=-d2
tools.openocd.upload.params.quiet=-d0
tools.openocd.upload.pattern="{path}/{cmd}" {upload.verbose} -s "{path}/share/openocd/scripts/" -f "{runtime.platform.path}/variants/{build.variant}/{build.openocdscript}" -c "telnet_port disabled; program {{{build.path}/{build.project_name}.bin}} verify reset 0x2000; shutdown"

tools.openocd.network_cmd={runtime.tools.arduinoOTA.path}/bin/arduinoOTA
tools.openocd.upload.network_pattern={network_cmd} -address {serial.port} -port 65280 -username arduino -password "{network.password}" -sketch "{build.path}/{build.project_name}.bin" -upload /sketch -b

# Program flashes the binary at 0x0000, so use the linker script without_bootloader
tools.openocd.program.params.verbose=-d2
tools.openocd.program.params.quiet=-d0
tools.openocd.program.pattern="{path}/{cmd}" {program.verbose} -s "{path}/share/openocd/scripts/" -f "{runtime.platform.path}/variants/{build.variant}/{build.openocdscript}" -c "telnet_port disabled; program {{{build.path}/{build.project_name}.elf}} verify reset; shutdown"

tools.openocd.erase.params.verbose=-d3
tools.openocd.erase.params.quiet=-d0
tools.openocd.erase.pattern=

tools.openocd.bootloader.params.verbose=-d2
tools.openocd.bootloader.params.quiet=-d0
tools.openocd.bootloader.pattern="{path}/{cmd}" {bootloader.verbose} -s "{path}/share/openocd/scripts/" -f "{runtime.platform.path}/variants/{build.variant}/{build.openocdscript}" -c "telnet_port disabled; init; halt; at91samd bootloader 0; program {{{runtime.platform.path}/bootloaders/{bootloader.file}}} verify reset; shutdown"